##
name: Python web app with terraform

on:
  push:
    branches:
      - main1

env:
  AZURE_RESOURCE_NAME: 'example-resources1'
  AZURE_WEBAPP_NAME: 'example-app-service-tf1' 
  webapp_for_link: example-app-service-tf1
  AZURE_WEBAPP_PACKAGE_PATH: '.' 
  SONAR_HOST_URL: 'http://13.82.221.244:8080'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
          fetch-depth: 0
    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      with:
        python-version: 3.x
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
  
    - name: Test cases
      run: |
        pip install pytest
        pip install coverage
        coverage run -m pytest
        coverage report -m
    - uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
    
    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
  codeQL:
    name: CodeQL Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1
  
  terraform:
    name: Provision resources using Terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    env:
      ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}

    steps:
      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        
      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan
        
      - name: Terraform Apply
        run: terraform apply --auto-approve

   
  deploy:
    runs-on: ubuntu-latest
    needs: [ build ,terraform ] 
    steps:
      - uses: actions/checkout@v2
      
      - name: Building web app
        uses: azure/appservice-build@v2
      
      - name: Get WebApp/FunctionApp publish profile
        id: webapp
        uses: aliencube/publish-profile-actions@v1
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_NAME }} 
          appName: ${{ env.AZURE_WEBAPP_NAME }}

      - name: Deploy web App using GH Action azure/webapps-deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ steps.webapp.outputs.profile }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
  
  owasp_zap:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: ZAP Scan
      uses: zaproxy/action-baseline@v0.4.0
      with:
        target: 'http://${{ env.webapp_for_link }}.azurewebsites.net'

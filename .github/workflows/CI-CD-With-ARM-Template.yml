name: ARM Template Based CICD workflow

on:
  push:
    branches:
      - main

env:
  AZURE_WEBAPP_NAME: 'toolkitsamplepythonapp' 
  AZURE_WEBAPP_PACKAGE_PATH: '.' 
  SONAR_HOST_URL: 'http://13.82.221.244:8080'
  AZURE_GROUP_NAME: 'toolkit-sample-armtemplate-rgp'


jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
          fetch-depth: 0
    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      with:
        python-version: 3.x
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
  
    - name: Test cases
      run: |
        pip install pytest
        pip install coverage
        coverage run -m pytest
        coverage report -m
      
    - name: SonarQube Code Analysis
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
    # If you wish to fail your job when the Quality Gate is red, uncomment the
    # following lines. This would typically be used to fail a deployment.
    # - uses: sonarsource/sonarqube-quality-gate-action@master
    #   timeout-minutes: 5
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
    
    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  codeQL:
    name: CodeQL Analyze
    runs-on: ubuntu-latest
    needs: build
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1
        
  provisioning:
    # The type of runner that the job will run on
    runs-on: Windows-latest
    needs: codeQL
    #if: github.ref == 'refs/heads/master'
    steps:

      - uses: actions/checkout@v2

      - name: Azure Login
        uses: Azure/login@v1.1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        # Set this value to true to enable Azure PowerShell Login in addition to Az CLI login
          enable-AzPSSession: true

      - run: |
          $rsgExists = az group exists -n ${{ env.AZURE_GROUP_NAME }}
          if ($rsgExists -eq 'false') {
              az group create -l eastus -n ${{ env.AZURE_GROUP_NAME }}
          }
      - name: Run ARM deploy
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ env.AZURE_GROUP_NAME }}
          template: ./template/azuredeploy.json

      - name: Logout
        run: |
          az logout
    

        
   
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      
      - name: Building web app
        uses: azure/appservice-build@v2
        
      - name: Get WebApp/FunctionApp publish profile
        id: webapp
        uses: aliencube/publish-profile-actions@v1
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        with:
          resourceGroupName: ${{ env.AZURE_GROUP_NAME }}
          appName: ${{ env.AZURE_WEBAPP_NAME }}
        
      - name: Deploy web App using GH Action azure/webapps-deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ steps.webapp.outputs.profile }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  owasp_zap:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: ZAP Scan
      uses: zaproxy/action-baseline@v0.4.0
      with:
        target: 'http://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net'
      
        
  
